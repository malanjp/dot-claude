{
  "cleanupPeriodDays": 30,
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "600000",
    "BASH_MAX_TIMEOUT_MS": "600000",
    "CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR": "true",
    "CLAUDE_LANGUAGE": "ja",
    "SHELL": "/opt/homebrew/bin/zsh"
  },
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(*)",
      "Edit(**)",
      "Glob(**)",
      "GlobTool(**)",
      "Grep(**)",
      "GrepTool(**)",
      "LS(**)",
      "MultiEdit(**)",
      "Read(**)",
      "TodoRead()",
      "TodoWrite(**)",
      "WebFetch(domain:*)",
      "WebSearch(**)",
      "Write(**)",
      "Fetch(https://*)",
      "Bash(git checkout*)"
    ],
    "deny": [
      "Bash(* | bash)",
      "Bash(* | sh)",
      "Bash(:(){ :|:& };:)",
      "Bash(> /dev/sda*)",
      "Bash(apt-get install*)",
      "Bash(brew install*)",
      "Bash(bundle install*)",
      "Bash(chmod -R 777*)",
      "Bash(chmod 777*)",
      "Bash(chown -R*)",
      "Bash(dd*)",
      "Bash(format*)",
      "Bash(gem install*)",
      "Bash(gh api --method DELETE*)",
      "Bash(gh auth logout*)",
      "Bash(gh auth refresh*)",
      "Bash(gh gist create*)",
      "Bash(gh gist delete*)",
      "Bash(gh gpg-key add*)",
      "Bash(gh gpg-key delete*)",
      "Bash(gh release create*)",
      "Bash(gh release delete*)",
      "Bash(gh release upload*)",
      "Bash(gh repo archive*)",
      "Bash(gh repo clone*)",
      "Bash(gh repo create*)",
      "Bash(gh repo delete*)",
      "Bash(gh repo deploy-key*)",
      "Bash(gh repo edit*)",
      "Bash(gh repo fork*)",
      "Bash(gh repo rename*)",
      "Bash(gh repo sync*)",
      "Bash(gh repo unarchive*)",
      "Bash(gh secret delete*)",
      "Bash(gh secret set*)",
      "Bash(gh ssh-key add*)",
      "Bash(gh ssh-key delete*)",
      "Bash(gh workflow disable*)",
      "Bash(gh workflow enable*)",
      "Bash(gh workflow run:*)",
      "Bash(git config*)",
      "Bash(git rebase*)",
      "Bash(git reset --hard*)",
      "Bash(git restore*)",
      "Bash(mkfs*)",
      "Bash(npm install -g*)",
      "Bash(pip install*)",
      "Bash(rm -rf ../*)",
      "Bash(rm -rf /)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~/*)",
      "Bash(sudo*)",
      "Bash(yum install*)"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/enforce-uv.sh"
          },
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/deny-check.sh"
          }
        ]
      },
      {
        "matcher": "git [commit|ci]",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/check-ai-commit.sh"
          }
        ]
      },
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/preserve-file-permissions.sh"
          }
        ]
      },
      {
        "matcher": "Bash|Grep|Read",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/command_guard.sh",
            "timeout": 10
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/auto-comment.sh"
          }
        ]
      },
      {
        "matcher": "Edit|Write|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/preserve-file-permissions.sh"
          }
        ]
      }
    ],
    "Notification": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "osascript -e 'display notification \"確認待ち\" with title \"Claude Code\"' && afplay -v 0.3 ~/.claude/assets/confirm.mp3"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/scripts/check-continue.sh"
          },
          {
            "type": "command",
            "command": "osascript -e 'display notification \"タスク完了\" with title \"Claude Code\"' && afplay -v 0.3 ~/.claude/assets/perfect.mp3"
          },
          {
            "type": "command",
            "command": "echo \"[$(date)] タスク完了\" >> ~/.claude/work.log"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "$CLAUDE_PROJECT_DIR/.claude/CLAUDE.md を必ず読んでください"
          }
        ]
      },
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"[$(date)] プロンプト送信\" >> ~/.claude/work.log"
          }
        ]
      }
    ]
  },
  "model": "opusplan",
  "statusLine": {
    "type": "command",
    "command": "bunx -y ccstatusline@latest",
    "padding": 0
  }
}